#----------------------------------------------------------------------------
# Plays a game of Hex.
#----------------------------------------------------------------------------

import fcntl, getopt, os, socket, string, sys, time

from random import randrange
from program import Program 
from game import Game

#----------------------------------------------------------------------------

# Plays a game.
class GamePlayer:
    class Error:
        pass

    # Constructor.
    #  black and white are programs.
    #  size is boardsize. 
    def __init__(self, black, white, size):
        self._black = self._origblack = black
        self._white = self._origwhite = white
        self._size = size
        self._game = Game()
        self._verbose = False
        
        for program in [self._black, self._white]:
            program.sendCommand("boardsize " + `size` + " " + `size`)
        self._blackName = self._black.getName()
        self._whiteName = self._white.getName()

    def getErrorMessage(self):
        return self._errorMessage

    #--------------------------------------------------------------------------
    
    # Set who plays next
    def adjustToMove(self, last):
        if (last == 'swap-pieces'):   # flip who is playing what color!
            temp = self._black
            self._black = self._white
            self._white = temp
        else:
            self._blackToMove = not self._blackToMove

    # ask black to dump board if verbose so that anybody
    # watching can see what is going on. 
    def showBoard(self):
        if self._verbose:
            self._sendCommand(self._black, "showboard")

    # Sends the opening moves to each program
    def playOpening(self, opening):
        if (opening == ''):
            return
        moves = opening.split(' ')
        for move in moves:
            if self._blackToMove:
                self._sendCommand(self._black, "play b " + move)
                self._sendCommand(self._white, "play b " + move)
            else:
                self._sendCommand(self._black, "play w " + move)
                self._sendCommand(self._white, "play w " + move)
            self._game.addMove(move)
            self.adjustToMove(move)
            self.showBoard()            

    # plays the game after the opening until a player resigns
    def continueGame(self):
        resigned = False
        elapsedBlack = 0.0
        elapsedWhite = 0.0
        while not resigned:
            if self._blackToMove:
                start = time.time()
                move = self._sendCommand(self._black, "genmove b")
                elapsedBlack = elapsedBlack + (time.time() - start)
            else:
                start = time.time()                
                move = self._sendCommand(self._white, "genmove w")
                elapsedWhite = elapsedWhite + (time.time() - start)
                
            move = string.lower(string.strip(move))
            self._game.addMove(move)
            
            if self._blackToMove:
                self._sendCommand(self._white, "play b " + move)
            else:
                self._sendCommand(self._black, "play w " + move)
           
            if string.find(move, "resign") >= 0:
                resigned = True
            
            self.adjustToMove(move)                
            self.showBoard()
        self._game.setElapsed("black", elapsedBlack)
        self._game.setElapsed("white", elapsedWhite)

    # plays the opening then the remainder of the game
    def play(self, opening, verbose):
        self._verbose = verbose
        self._blackToMove = True
        self.playOpening(opening)
        self.continueGame()
        return self._game

    #--------------------------------------------------------------------------

    def save(self, fileName, name, resultBlack, resultWhite):
        t = time.localtime()
        sgfDate = time.strftime("%Y-%m-%d", t)
        longDate = time.strftime("%Y-%m-%d %X %Z", t)
        hostname = socket.gethostbyaddr(socket.gethostname())[0]
        result = self._mergeResults(resultBlack, resultWhite)
        f = open(fileName, "w")
        f.write("(\n;" \
                "GM[11]SZ[%i]PB[%s]PW[%s]\n" \
                "RE[%s]DT[%s]GN[%s]US[twogtp.py]\n" \
                "GC[Generated by twogtp.py.\n"
                "Black Cmd: %s\n" \
                "White Cmd: %s\n"
                "Host: %s\n" \
                "Time: %s\n" \
                "Result according to B: %s\n" \
                "Result according to W: %s]\n"
                % (self._size, self._sgfText(self._blackName), \
                   self._sgfText(self._whiteName), \
                   result, sgfDate, name, \
                   self._sgfText(self._origblack.getCommand()), \
                   self._sgfText(self._origwhite.getCommand()), \
                   self._sgfText(hostname), self._sgfText(longDate), \
                   resultBlack, resultWhite))
        blackToMove = 1
        for move in self._game.moveList():
            if blackToMove:
                f.write(";B[")
            else:
                f.write(";W[")
            if move == "swap-pieces":
                f.write("swap-pieces]\n");
            elif move == "resign":
                f.write("resign]\n")
                break;
            else:
                f.write(move + "]")
                blackToMove = not blackToMove;
            f.write("\n")
            
        f.write(")\n");
        f.close()

    def _mergeResults(self, result1, result2):
        if result1 == result2:
            return result1
        if result1[0:2] == "B+" and result2[0:2] == "B+":
            return "B+"
        if result1[0:2] == "W+" and result2[0:2] == "W+":
            return "W+"
        return "?"

    # Sends htp command down the channel.
    # Raises GamePlayer.Error if program dies, etc.
    def _sendCommand(self, program, command):
        try:
            return program.sendCommand(command)
        except Program.CommandDenied:
            reason = program.getDenyReason()
            self._errorMessage = program.getColor() + ": "  + reason
            raise GamePlayer.Error
        except Program.Died:
            self._errorMessage = program.getColor() + ": program died"
            raise GamePlayer.Error

    def _sgfText(self, s):
        s = s.replace("\\", "\\\\")
        s = s.replace("]", "\]")
        return s

